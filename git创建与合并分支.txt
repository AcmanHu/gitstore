首先，创建dev 分支，然后切换到dev 分支
	git checkout -b dev
      【注：】git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
	git branch dev
	git checkout dev
然后，用git branch命令查看当前分支：
	git branch
现在，dev分支的工作完成，我们就可以切换回master分支：
	git checkout master
	切换回master分支后，
	再查看一个readme.txt文件，
	刚才添加的内容不见了！
	因为那个提交是在dev分支上，
	而master分支此刻的提交点并没有变：
现在，我们把dev分支的工作成果合并到master分支上：
	git merge dev
合并完成后，就可以放心地删除dev分支了：
	git branch -d dev
用带参数的git log也可以看到分支的合并情况：
	git log --graph --pretty=oneline --abbrev-commit

	git merge --no-ff -m "merge with no-ff" dev
	合并分支时，加上--no-ff参数就可以用普通模式合并，
	合并后的历史有分支，能看出来曾经做过合并，
	而fast forward合并就看不出来曾经做过合并。
并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？
幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：
	git stash	
	现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
太棒了，原计划两个小时的bug修复只花了5分钟！现在，是时候接着回到dev分支干活了！
工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
	git stash list
工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
另一种方式是用git stash pop，恢复的同时把stash内容也删了：
再用git stash list查看，就看不到任何stash内容了：
	你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
	git stash apply stash@{0}